apply plugin: 'com.android.application'

def SUPPORT_LIBRARY_VERSION = "26.1.0"

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.eutechpro.movies"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 4
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    // Rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.4'
    
    //Retrofit + Gson
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation "com.squareup.retrofit2:converter-gson:2.3.0"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'

    //Dagger2
    implementation 'com.google.dagger:dagger:2.12'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.12'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.2.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.2.0'

    /* Testing */

    //JUnit
    testImplementation 'junit:junit:4.12'

    // Mockito
    androidTestImplementation "org.mockito:mockito-core:2.10.0"
    androidTestImplementation "org.mockito:mockito-android:2.10.0"
    testImplementation "org.mockito:mockito-core:2.10.0"

    //Espresso
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:3.0.1"
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.1'
}


tasks.withType(Test) {
    testLogging {
        events "skipped", "failed" // set options for log level LIFECYCLE: "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError" //what to print out: "started", "skipped", "failed", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} \n         ${result.testCount} tests \n         ${result.successfulTestCount} successes \n         ${result.failedTestCount} failures \n         ${result.skippedTestCount} skipped"
                def startItem = '', endItem = '  '
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
